%none \not
%left 'and' 'or'
%left \compare
%left \linear
%left \scalar
%right \pow
%none '!'
%none '{' '(' '[' ']' ')' '}' '.'

module
    module-line
        > statement
        > module-declaration

    > @multiple(module-line, sep)    =>
        new @node.Program do
            sourceType: 'module'
            body: $[0],
            loc: @rootLoc

identifier
    > \id   => new @node.Identifier(name: $[0])

literal
    > \null         => @literal null
    > \undefined    => @literal undefined
    > \true         => @literal true
    > \false        => @literal false
    > \number       => @literal parseFloat $[0]

string

    single
        > \simple-string    => @literal @escapade $[0]


    double
        component
            # interpolation
            > '{' e '}'    =>
                new @node.StringInterpolation do
                    argument: $[1]

            # raw string
            > \string-literal   =>
                new @node.StringLiteral do
                    value: @escapade($[0], true)

        > '"' @multiple(component) '"'  =>
            new @node.StringExpression do
                parts: $[1]

    > single
    > double

sep
    > ','
    > \nl

member-access
    # member expressions ...

    obj
        > \obj  => new @node.VirtualObjectExpression({})

    > e \. identifier   =>
        new @node.MemberExpression do
            object: $[0]
            property: $[2]
            computed: false

    # used for cascade statements only
    > obj \. identifier  =>
        new @node.MemberExpression do
            object: $[0]
            property: $[2]
            computed: false

    > \this identifier  =>
        new @node.MemberExpression do
            object: new @node.ThisExpression({loc: null})
            property: $[1]
            computed: false

    > e '[' e ']'  =>
        new @node.MemberExpression do
            object: $[0]
            property: $[2]
            computed: true

e
    splat
        > \... e    =>
            new @node.SpreadElement do
                argument: $[1]
        
    array
        component
            > e
            > splat
        
        indented-list
            
            > component                     => [$[0]]
            > indented-list \nl component   => [...$[0], $[2]]

        > '[' @multiple(component, sep) ']'     => new @node.ArrayExpression elements: $[1]
        > '*' \indent indented-list \dedent     => new @node.ArrayExpression elements: $[2]

    object
        property
            > splat

            > identifier =>
                new @node.Property do
                    key: $[0]
                    value: $[0]
                    method: false
                    shorthand: true
                    computed: false
                    kind: 'init'
                
            > identifier ':' e  =>
                new @node.Property do
                    key: $[0]
                    value: $[2]
                    method: false
                    shorthand: false
                    computed: false
                    kind: 'init'

            > identifier function  =>
                new @node.Method do
                    id: $[0]
                    definition: $[1]
                    kind: null
                    subject: 'object'

            > '@@' identifier function =>
                new @node.Method do
                    id: $[1]
                    definition: $[2]
                    kind: "symbol"

            > \get identifier function =>
                new @node.Method do
                    id: $[1]
                    definition: $[2]
                    kind: 'get'
            
            > \set identifier function =>
                new @node.Method do
                    id: $[1]
                    definition: $[2]
                    kind: 'set'

        indented-list
            
            > property                     => [$[0]]
            > indented-list \nl property   => [...$[0], $[2]]

        > '{' @multiple(property, sep) '}'      => new @node.ObjectExpression properties: $[1]
        > '**' \indent indented-list \dedent    => new @node.ObjectExpression properties: $[2]

    embedded-expression
        embedded
            > \embedded-ml
            > \embedded-sl

        > embedded  => @embedded($[0])

    compare-chain
        > e \compare e =>
            new @node.CompareChainExpression do
                operators: [$[1]]
                expressions: [$[0], $[2]]

        > compare-chain \compare e =>
            new @node.CompareChainExpression do
                operators: [...$[0].operators, $[1]]
                expressions: [...$[0].expressions, $[2]]

    call-expression

        argument
            > e
            > splat
        
        arguments
            > @multiple(argument, ',')

        traditional

            # call expression
            > e '(' arguments ')'    =>
                new @node.CallExpression do
                    callee: $[0]
                    arguments: $[2]


        constructor
            > \new identifier '(' arguments ')' =>
                new @node.NewExpression do
                    callee: $[1]
                    arguments: $[3]

            > \new member-access '(' arguments ')' =>
                new @node.NewExpression do
                    callee: $[1]
                    arguments: $[3]

        lite
            lite-args
            
                > argument                  => [$[0]]
                > lite-args ',' argument    => [...$[0], $[2]]
                > lite-args argument        => [...$[0], $[1]]

            # call expression
            > e '`' lite-args =>
                new @node.CallExpression do
                    callee: $[0]
                    arguments: $[2]

        > traditional
        > constructor
        > lite

    > e \scalar e       => @binaryExpression($)
    > e \linear e       => @binaryExpression($)
    > e 'pow' e         => @binaryExpression($)
    > e 'and' e         => @binaryExpression($)
    > e 'or' e          => @binaryExpression($)
    > \linear e         => @unaryExpression($)
    > \! e              => @unaryExpression($)
    > \not e            => @unaryExpression($)
    > '(' e ')'         => $[1]
    > function          => new @node.FunctionExpression($[0])
    > class.expression
    > array
    > object
    > literal
    > string
    > identifier
    > member-access
    > compare-chain
    > call-expression
    > embedded-expression

    > \await e =>
        new @node.AwaitExpression do
            argument: $[1]
    
    > \this => new @node.ThisExpression({})
    

block
    > '{' @multiple(statement, \nl) '}'            => $[1]
    > \indent @multiple(statement, \nl) \dedent    => $[1]

function
    parameter
        > assignment-pattern
        > assignment-pattern.rest
        > assignee '=' e  =>
            new @node.AssignmentPattern do
                left: $[0]
                right: $[2]

    bound
        > \->
        > \=>
    
    type
        > \*
        > \~
        > \~*

    params
        > @multiple(parameter, ',')
        
    body
        > block => new @node.BlockStatement(body: $[0])
        
    > \fn '(' params ')' body  =>
        new @node.Function do
            params: $[2]
            body: $[4]
            async: false
            generator: false
            bound: null

    > \fn '(' params ')' bound body  =>
        new @node.Function do
            params: $[2]
            body: $[5]
            async: false
            generator: false
            bound: $[4] == "=>"

    > \fn '(' params ')' type body  =>
        new @node.Function do
            params: $[2]
            body: $[5]
            async: $[4].includes '~'
            generator: $[4].includes '*'
            bound: null

    > \fn '(' params ')' bound type body  =>
        new @node.Function do
            params: $[2]
            body: $[6]
            async: $[5].includes '~'
            generator: $[5].includes '*'
            bound: $[4] == '=>'

assignment-pattern
    rest
        > \... assignment-pattern  =>
            new @node.RestElement do
                argument: $[1]

    object-pattern
        property
            > rest

            > identifier ':' assignment-pattern =>
                new @node.AssignmentProperty do
                    key: $[0]
                    value: $[2]
                    kind: 'init'
                    method: false
                    shorthand: false
                    computed: false

            > identifier =>
                new @node.AssignmentProperty do
                    key: $[0]
                    value: $[0]
                    kind: 'init'
                    method: false
                    shorthand: false
                    computed: false

        > '{' @multiple(property, ',') '}' =>
            new @node.ObjectPattern(properties: $[1])

    array-pattern
        component
            > rest
            > assignment-pattern

        > '[' @multiple(component, ',') ']' =>
            new @node.ArrayPattern(elements: $[1])

    > object-pattern
    > array-pattern
    > identifier

assignee
    > \assign assignment-pattern    => $[1]
    > identifier

module-declaration
    source
        > string.single

    import-declaration
        namespace-specifier
            > '*' \as identifier =>
                new @node.ImportNamespaceSpecifier(local: $[2])

        default-specifier
            > \identifier =>
                new @node.ImportDefaultSpecifier(local: $[0])

        import-list
            import-item
                > identifier =>
                    new @node.ImportSpecifier do
                        imported: $[0]
                        local: $[0]

                > identifier \as identifier =>
                    new @node.ImportSpecifier do
                        imported: $[0]
                        local: $[2]

            > @multiple(import-item, ',')

        > \import namespace-specifier \from source =>
            new @node.ImportDeclaration do
                specifiers: [$[1]]
                source: $[3]

        > \import default-specifier \from source =>
            new @node.ImportDeclaration do
                specifiers: [$[1]]
                source: $[3]

        > \import '{' import-list '}' \from source =>
            new @node.ImportDeclaration do
                specifiers: $[2]
                source: $[5]

        > \import default-specifier ',' '{' import-list '}' \from source =>
            new @node.ImportDeclaration do
                specifiers: [$[1], ...$[4]]
                source: $[7]

    export-declaration
        export-item
            > identifier =>
                new @node.ExportSpecifier do
                    exported: $[0]
                    local: $[0]

            > identifier \as identifier =>
                new @node.ExportSpecifier do
                    exported: $[2]
                    local: $[0]

        export-list
            > @multiple(export-item, ',')

        > \export statement.declaration =>
            new @node.ExportNamedDeclaration do
                declaration: $[1]
                specifiers: []
                source: null

        > \export '{' export-list '}' =>
            new @node.ExportNamedDeclaration do
                declaration: null
                specifiers: $[2]
                source: null

        > \export '{' export-list '}' \from source =>
            new @node.ExportNamedDeclaration do
                declaration: null
                specifiers: $[2]
                source: $[5]

        # e.g. export default someexpression
        > \export \default e =>
            new @node.ExportDefaultDeclaration do
                declaration: $[2]

        # e.g. export * from "some/other/module"
        > \export '*' \from source =>
            new @node.ExportAllDeclaration do
                source: $[3]

    > import-declaration
    > export-declaration

class
    class-body
        class-item
            > \static identifier function   =>
                new @node.MethodDefinition do
                    key: $[1]
                    value: $[2]
                    kind: "method"
                    computed: false
                    static: true

            > identifier function  =>
                new @node.MethodDefinition do
                    key: $[0]
                    value: $[1]
                    kind:
                        if $[0].name == "constructor"
                            "constructor"
                        else
                            "method"
                    computed: false
                    static: false

            > '@@' identifier function =>
                new @node.MethodDefinition do
                    key: $[1]
                    value: $[2]
                    kind: "symbol"
                    computed: true
                    static: false


            > \get identifier function  =>
                new @node.MethodDefinition do
                    key: $[0]
                    value: $[1]
                    kind: "get"
                    computed: false
                    static: false

            > \set identifier function  =>
                new @node.MethodDefinition do
                    key: $[0]
                    value: $[1]
                    kind: "set"
                    computed: false
                    static: false

        > @multiple(class-item, sep)

    declaration
        > \def \class identifier '{' class-body '}'   =>
            new @node.ClassDeclaration do
                id: $[2]
                superClass: null
                body: $[4]

        > \def \class identifier '<' e '{' class-body '}'   =>
            new @node.ClassDeclaration do
                id: $[2]
                superClass: $[4]
                body: $[6]

    expression
        > \class '{' class-body '}'   =>
            new @node.ClassExpression do
                id: null
                superClass: null
                body: $[2]

        > \class '<' e '{' class-body '}'   =>
            new @node.ClassExpression do
                id: null
                superClass: $[2]
                body: $[4]



statement
    blockable-statement

        blocky
            > blockable-statement
            > block                 => new @node.BlockStatement(body: $[0])

        while-statement
            > \while e blocky =>
                new @node.WhileStatement do
                    test: $[1]
                    body: $[2]

        for-statement
            > \for assignment-pattern \in e blocky =>
                new @node.ForInStatement do
                    left: $[1]
                    right: $[3]
                    body: $[4]
                    async: false

            > \for assignment-pattern \on e blocky =>
                new @node.ForInStatement do
                    left: $[1]
                    right: $[3]
                    body: $[4]
                    async: true


        do-statement
            > \do block     => new @node.BlockStatement(body: $[1])


        if-statement
            > \if e blocky =>
                new @node.IfStatement do
                    test: $[1]
                    consequent: $[2]
                    alternate: null

            > \if e blocky \else blocky =>
                new @node.IfStatement do
                    test: $[1]
                    consequent: $[2]
                    alternate: $[4]

        try-statement
            catch-clause
                > \catch assignment-pattern blocky =>
                    new @node.CatchClause do
                        param: $[1]
                        body: $[2]
                        guard: null

            > \try blocky catch-clause =>
                new @node.TryStatement do
                    block: $[1]
                    handler: $[2]
                    finalizer: null

            > \try blocky catch-clause \finally blocky =>
                new @node.TryStatement do
                    block: $[1]
                    handler: $[2]
                    finalizer: $[4]

            > \try blocky \finally blocky =>
                new @node.TryStatement do
                    block: $[1]
                    handler: null
                    finalizer: $[3]

        > while-statement
        > for-statement
        > if-statement
        > try-statement
        > do-statement

    declaration
        declarator
            > assignee  =>
                new @node.VariableDeclarator do
                    constant: false
                    id: $[0]
                    init: null
                    
            > assignee \= e  =>
                new @node.VariableDeclarator do
                    constant: true
                    id: $[0]
                    init: $[2]
                    
            > assignee \:= e  =>
                new @node.VariableDeclarator do
                    constant: false
                    id: $[0]
                    init: $[2]
        
        declarators
            > declarator                    => [$[0]]
            > declarators ',' declarator    => [...$[0], $[2]]
        

        > \def declarators  =>
            new @node.VariableDeclaration do
                declarations: $[1]
        
        > \def identifier function    =>
            new @node.FunctionDeclaration do
                id: $[1]
                value: $[2]

        > class.declaration
    
    assignment-statement
        assignee
            > identifier
            > member-access

        > assignee '=' e  =>
            new @node.AssignmentStatement do
                left: $[0]
                right: $[2]
                operator: '='

        > assignee \reassign e =>
            new @node.AssignmentStatement do
                left: $[0]
                right: $[2]
                operator: $[1]

        > \assign assignment-pattern '=' e =>
            new @node.AssignmentStatement do
                left: $[1]
                right: $[3]
                operator: '='

    control-flow-statement
        return-statement
            > \return       => new @node.ReturnStatement argument: null
            > \return e     => new @node.ReturnStatement argument: $[1]

        yield-statement
            > \yield =>
                new @node.YieldStatement do
                    argument: null

            > \yield e =>
                new @node.YieldStatement do
                    argument: $[1]

        > return-statement
        > yield-statement

        > \throw e =>
            new @node.ThrowStatement do
                argument: $[1]


        > \break =>
            new @node.BreakStatement do
                label: null

        > \continue =>
            new @node.ContinueStatement do
                label: null

    cascade-statement
        component
            > assignment-statement
            > expression-statement

        > e \ref component =>
            new @node.CascadeStatement do
                root: $[0],
                degrees: [$[1].length]
                statements: [$[2]]

        > cascade-statement \ref component =>
            new @node.CascadeStatement do
                root: $[0].root
                degrees: [...$[0].degrees, $[1].length]
                statements: [...$[0].statements, $[2]]

    expression-statement
        > e =>
            new @node.ExpressionStatement do
                expression: $[0]

    > cascade-statement
    > blockable-statement
    > declaration
    > assignment-statement
    > control-flow-statement
    > expression-statement
