
%none reduce-union
%none append-union

spec
    component
        > interface-definition
        > enum-definition
    > @multiple(component)  => @obj $[0]

enum-definition    
    > \enum \id '{' @multiple(\string, '|') '}'  =>
        [
            $[1]
            {
                kind: 'enum'
                types: $[3].map (str) -> str.slice 1, -1
            }
        ]

interface-definition
    prop
        > \id ':' e ';'  =>
            [$[0], $[2]]
           
    proplist
        > @multiple(prop)
        
    e
        literal
            > \string
            > \null
            
            > \true
            > \false
        
        # TODO: implement unions properly
        union
            > e '|' e       => [$[0], $[2]]
            
            %prec append-union
            > union '|' e   => [...$[0], $[2]]
    
        # object
        > '{' proplist '}'   =>
            kind: 'object'
            items: @obj $[1]
        
        # array
        > '[' e ']' =>
            kind: 'array'
            base: $[1]
            
        > literal    => @literal($[0])
        
        > \id       =>
            kind: 'reference'
            value: $[0]
            
        %prec reduce-union
        > union =>
            {
                kind: 'union'
                types: $[0]
            }
    
    > \interface \id '{' proplist '}'    =>
        [
            $[1]
            {
                kind: 'interface'
                props: @obj [['type', $[1]], ...$[3]]
                base: []
            }
        ]
    
    > \interface \id '<:' @multiple(\id, ',') '{' proplist '}'  =>
        [
            $[1]
            {
                kind: 'interface'
                props: @obj [['type', $[1]], ...$[5]]
                base: $[3]
            }
        ]
        