
# tests for basic object functionalities and member-expressions go here

##test: Member expressions
    def ob = 'hah'
    
    eq(ob.length, 3)
    eq('yay' + 'a'.length, 'yay1')
    eq(ob['length'], 3)
    eq(33 + ob['length'], 36)
    
##test: Method Calls
    def ob = 'yaya'
    
    eq(ob.slice(2), 'ya')
    eq(ob['slice'](1), 'aya')
    
    throws(() {
        def slice = ob['slice']
        
        slice(3)
    })
    
##test: Data objects
    def obj = {
        a: 2
        b: 55
    }
    
    eq(obj.a, 2)
    eq(obj.b, 55)
    
    eq(2 + obj.a, 4)

##test: Objects with methods
    def obj = {
        a: 45
        increase() {
            @a = @a + 2
        }
        
        getDouble() {
            return 2 * this.a
        }
    }

    eq(obj.a, 45)
    obj.increase()
    eq(obj.a, 47)
    eq(obj.getDouble(), 94)
    
##test: Objects with symbolic methods
    def obj = {
        a: 45
        increase() {
            @a = @a + 2
        }
        
        getDouble() {
            return 2 * this.a
        }

        @@ iterator() * {
            def i := 0

            while i < 4 do
                yield @a + i

                i += 1
        }
    }

    def list = []
    
    for num in obj do
        list.push(num)

    arrayEq(list, [45, 46, 47, 48])


##test: Immutable this binding in methods
    def obj = {
        a: 45
        increase() {
            @a = @a + 2
        }
        
        getDouble() {
            return 2 * this.a
        }
    }

    def obj2 = {
        a: 35
        increase: obj.increase,
        getDouble: obj.getDouble
    }

    eq(obj2.a, 35)
    obj2.increase()
    eq(obj2.a, 35)
    eq(obj.a, 47)
    eq(obj2.getDouble(), 94)

##test: Immutable this (nested functions)
    def obj = {
        a: 45
        
        getMultiplier() {
            return (n) {
                return @a * n
            }
        }

        getSubtractor() {
            return (n) -> {
                return @a - n
            }
        }
    }

    def obj2 = {
        a: 35
        getMultiplier: obj.getMultiplier
        subtractor: obj.getSubtractor()
    }

    def multiplier = obj2.getMultiplier()

    eq(multiplier(3), 135)
    eq(obj2.subtractor(3), 32)

##test: Immutable this (nested objects)
    def obj = {
        a: 45
        
        getObject() {            
            return {
                a: 25
                subtract(n) {
                    return @a - n
                }

                multiply(n) -> {
                    return @a * n
                }
            }
        }
    }

    def object = obj.getObject()

    def obj2 = {
        a: 35
        subtract: object.subtract
        multiply: object.multiply
    }

    eq(obj2.subtract(2), 23)
    eq(obj2.multiply(2), 70)

##test: Object spreads
    def obj1 = {
        a: 1
        b: 4
    }

    def obj2 = {
        c: 6
        ...obj1
    }

    def obj3 = {
        a: 55
    }

    def obj4 = {
        ...obj1
        ...obj3
    }

    eq(obj2.c, 6)
    eq(obj2.b + obj2.a, 5)
    eq(obj4.a + obj1.b, 59)


##test: Array objects
    def array = [1, 3, 4]
    def arrayToo = [2, 3, ...array]
    def otherArray = [...array, ...array]

    arrayEq(arrayToo, [2, 3, 1, 3, 4])
    arrayEq(otherArray, [1, 3, 4, 1, 3, 4])
